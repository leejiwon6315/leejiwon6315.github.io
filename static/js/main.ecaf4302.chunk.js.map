{"version":3,"sources":["styles/Home.module.scss","Hooks/useInput.js","Pages/Hello.js","Pages/WelcomePage.js","App.js","serviceWorker.js","index.js","styles/WelcomePage.module.scss"],"names":["module","exports","useInput","initialValue","useState","value","setValue","e","target","Hello","name","className","styles","hello_container","WelcomePage","onChangeName","handleSubmit","history","useHistory","start_container","rel","href","user_start_container","user_sub_title","user_title","main_explain","user_question","user_input","type","placeholder","onChange","user_enter_btn","onClick","preventDefault","push","alert","onSubmit","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,gBAAkB,gC,mKCcrBC,EAbE,SAACC,GAAkB,IAAD,EACPC,mBAASD,GADF,mBAC1BE,EAD0B,KACnBC,EADmB,KAUjC,MAAO,CAACD,EAPS,SAACE,GAAO,IAEXF,EACRE,EADFC,OAAUH,MAEZC,EAASD,M,iBCEEI,EARD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACE,yBAAKC,UAAWC,IAAOC,iBACrB,qCAAWH,EAAX,O,gBCgDSI,EAlDK,SAAC,GAA0C,IAAxCJ,EAAuC,EAAvCA,KAAMK,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACnCC,EAAUC,cAahB,OACE,yBAAKP,UAAWC,IAAOO,iBACrB,4BAAQR,UAAU,cAChB,uDACA,0BAAMS,IAAI,gBAAgBC,KAAK,yBAGjC,yBAAKV,UAAWC,IAAOU,sBACrB,wBAAIX,UAAWC,IAAOW,gBAAtB,kBACA,wBAAIZ,UAAWC,IAAOY,YAAtB,yBACA,uBAAGb,UAAWC,IAAOa,cAArB,sGAEiC,6BAFjC,yEAGyE,IAHzE,6BAMA,wBAAId,UAAWC,IAAOc,eAAtB,sBACA,2BACEf,UAAWC,IAAOe,WAClBC,KAAK,OACLvB,MAAOK,EACPmB,YAAY,yBACZC,SAAUf,IAEZ,4BACEJ,UAAWC,IAAOmB,eAClBC,QArCY,SAACzB,GACnBA,EAAE0B,iBAEW,KAATvB,EAIFO,EAAQiB,KAAK,UAAYxB,GAHzByB,MAAM,6DAkCFC,SAAUpB,GAHZ,0BCtBOqB,EAdH,WAAO,IAAD,EACanC,EAAS,IADtB,mBACTQ,EADS,KACHK,EADG,KAEhB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEuB,OAAK,EACLC,KAAK,IACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAa9B,KAAMA,EAAMK,aAAcA,OAEvD,kBAAC,IAAD,CAAOwB,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,CAAO9B,KAAMA,SCHlC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5B3D,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,qBAAuB,0CAA0C,eAAiB,oCAAoC,WAAa,gCAAgC,aAAe,kCAAkC,cAAgB,mCAAmC,WAAa,gCAAgC,eAAiB,uC","file":"static/js/main.ecaf4302.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hello_container\":\"Home_hello_container__1XV12\"};","import { useState } from \"react\";\n\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setValue(value);\n  };\n\n  return [value, onChange];\n};\n\nexport default useInput;\n","import React from \"react\";\nimport styles from \"../styles/Home.module.scss\";\n\nconst Hello = ({ name }) => {\n  return (\n    <div className={styles.hello_container}>\n      <h1>hello {name}!</h1>\n    </div>\n  );\n};\n\nexport default Hello;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styles from \"../styles/WelcomePage.module.scss\";\n\nconst WelcomePage = ({ name, onChangeName, handleSubmit }) => {\n  const history = useHistory();\n\n  const handleEnter = (e) => {\n    e.preventDefault();\n\n    if (name === \"\") {\n      alert(\"이름을 입력해 주세요\");\n      return;\n    } else {\n      history.push(\"/HELLO/\" + name);\n    }\n  };\n\n  return (\n    <div className={styles.start_container}>\n      <header className=\"App_header\">\n        <title>HELLO JEEWON'S WORLD</title>\n        <link rel=\"shortcut icon\" href=\"/public/favicon.ico\" />\n      </header>\n\n      <div className={styles.user_start_container}>\n        <h1 className={styles.user_sub_title}>WEB-FE WARNING</h1>\n        <h1 className={styles.user_title}>HELLO JEEWON'S WORLD!</h1>\n        <p className={styles.main_explain}>\n          This website is just my portfolio website. If you are curious about\n          me, please enter this website. <br />\n          There are no viruses or download files on this website, so be assured.{\" \"}\n          Let's enter together now.\n        </p>\n        <h3 className={styles.user_question}>What is your name?</h3>\n        <input\n          className={styles.user_input}\n          type=\"text\"\n          value={name}\n          placeholder=\"Please Write Your Name\"\n          onChange={onChangeName}\n        />\n        <button\n          className={styles.user_enter_btn}\n          onClick={handleEnter}\n          onSubmit={handleSubmit}\n        >\n          Enter The New World\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WelcomePage;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport useInput from \"./Hooks/useInput\";\nimport Hello from \"./Pages/Hello\";\nimport WelcomePage from \"./Pages/WelcomePage\";\n\nconst App = () => {\n  const [name, onChangeName] = useInput(\"\");\n  return (\n    <BrowserRouter>\n      <Route\n        exact\n        path=\"/\"\n        render={() => <WelcomePage name={name} onChangeName={onChangeName} />}\n      />\n      <Route path=\"/HELLO\" render={() => <Hello name={name} />} />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./global.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start_container\":\"WelcomePage_start_container__1G5SD\",\"user_start_container\":\"WelcomePage_user_start_container__14fYo\",\"user_sub_title\":\"WelcomePage_user_sub_title__3Sgk5\",\"user_title\":\"WelcomePage_user_title__32a8G\",\"main_explain\":\"WelcomePage_main_explain__LCSws\",\"user_question\":\"WelcomePage_user_question__10Xo1\",\"user_input\":\"WelcomePage_user_input__IgtwB\",\"user_enter_btn\":\"WelcomePage_user_enter_btn__gtj9N\"};"],"sourceRoot":""}